[project]
name = 'lab-system'
description = 'A system for administrating labs used by some courses at Chalmers University of Technology and Gothenburg University'
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python :: 3",
]
version = '0.1.0'
requires-python = '>=3.12'
dependencies = [
  'argcomplete >=3.1.6, <4',
  'atomicwrites >=1.4.1, <2',
  'chardet >=5.2, <6',
  'dominate >=2.8, <3',
  'gitdb >=4.0.11, <5',
  'GitPython >=3.1.43, <4',
  'google-api-python-client >=2.111, <3',
  'google-auth >=2.25.2, <3',
  'google-auth-oauthlib >=1.1, <2',
  'gql >=3.4.1, <4',
  'graphql-core >=3.2.3, <4',
  'gspread >=3.7, <4',
  'more-itertools >=9.1, <10',
  'python-dateutil >=2.8.2, <3',
  'python-gitlab >=4.3, <5',
  'python-ldap >=3.4.4, <4',
  'requests >=2.32, <3',
  'watchdog >=2.3.1, <3',
]

[project.optional-dependencies]
# Only needed for tester.python_proot.
# This also requires the proot executable.
oldstyle_sandboxing = [
  'seccomp >= 2.4.4, <3',
]

[[project.authors]]
name = 'Christian Sattler'
email = 'sattler@chalmers.se'

[project.license]
text = "MIT License"

[project.urls]
Homepage = 'https://github.com/ChalmersGU-data-structure-courses/lab-system'

[tool.black]
extend-exclude = """
  /_2020_lp2/|\
  /_2020_lp2_orig/|\
  /_2021_lp3/|\
  /chalmers_pdb/new_rpcc_client.py|\
  /old/|\
  a^
"""  # Last line matches nothing.

[tool.isort]
profile = "black"
skip_gitignore = true
skip = [
  './_2020_lp2/',
  './_2020_lp2_orig/',
  './_2021_lp3/',
  './chalmers_pdb/new_rpcc_client.py',
  './old/',
]
lines_after_imports = 2

[tool.pylint]
source-root = '.'
ignore-paths = [
  '_2020_lp2/',
  '_2020_lp2_orig/',
  '_2021_lp3/',
  'chalmers_pdb/new_rpcc_client.py',
  'old/',
  '.venv/',  # Not tracked.
]
max-line-length = 150  # Comments are often written in the style of one sentence per line.
allowed-redefined-builtins = ['bin', 'compile', 'dir', 'format', 'id', 'input']

disable = [
  # These are acceptable for now.
  # They are mostly non-upper-case class constants and false positives.
  # In the future, we should follow standard naming conventions.
  'C0103',  # invalid-name

  # These are acceptable for now.
  # In the future, we should improve documentation.
  'C0114',  # missing-module-docstring
  'C0115',  # missing-class-docstring
  'C0116',  # missing-function-docstring

  # Too many false positives.
  'R0801',  # duplicate-code

  # Too many false positives.
  # We have examples similar to this one: https://github.com/pylint-dev/pylint/issues/9625
  'W0135',  # contextmanager-generator-missing-cleanup

  # Do not warn about already documented TODOs.
  'W0511',  # fixme

  # These are acceptablefor now.
  # In the future, we should improve our logging framework.
  'W1201',  # logging-not-lazy
  'W1202',  # logging-format-interpolation
  'W1203',  # logging-fstring-interpolation

  # These are acceptable.
  # Uncomment to perhaps find opportunities for refactoring.
  'C0302',  # too-many-lines
  'R0902',  # too-many-instance-attributes
  'R0903',  # too-few-public-methods
  'R0904',  # too-many-public-methods
  'R0912',  # too-many-branches
  'R0913',  # too-many-arguments
  'R0914',  # too-many-locals
  'R0915',  # too-many-statements
  'R0917',  # too-many-positional-arguments

  # Outer negation is preferrable if non-negated condition is the primary condition under consideration.
  'C0117',  # unnecessary-negation

  # Iterating over dictionary keys should be made explicit.
  'C0201',  # consider-iterating-dictionary
]

[tool.setuptools]
# TODO: Remove workaround once we have proper namespacing.
py-modules = []
