type Account implements Node & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  accountDomainLookups: [AccountDomainLookup!]
  accountDomains: [AccountDomain!]
  coursesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): CourseConnection
  id: ID!
  name: String
  outcomeCalculationMethod: OutcomeCalculationMethod
  outcomeProficiency: OutcomeProficiency
  parentAccountsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountConnection!
  proficiencyRatingsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ProficiencyRatingConnection
  rootOutcomeGroup: LearningOutcomeGroup!
  sisId: String
  subAccountsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountConnection
}

"""The connection type for Account."""
type AccountConnection {
  """A list of edges."""
  edges: [AccountEdge]

  """A list of nodes."""
  nodes: [Account]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type AccountDomain implements LegacyIDInterface & Timestamped {
  """legacy canvas id"""
  _id: ID!
  createdAt: DateTime
  host: String!
  updatedAt: DateTime
}

type AccountDomainLookup implements LegacyIDInterface & Timestamped {
  """legacy canvas id"""
  _id: ID!
  accountDomain: AccountDomain
  authenticationProvider: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""An edge in a connection."""
type AccountEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Account
}

"""Autogenerated input type of AddConversationMessage"""
input AddConversationMessageInput {
  conversationId: ID!
  body: String!
  recipients: [String!]!
  includedMessages: [ID!]
  attachmentIds: [ID!]
  mediaCommentId: ID
  mediaCommentType: String
  contextCode: String
  userNote: Boolean
}

"""Autogenerated return type of AddConversationMessage"""
type AddConversationMessagePayload {
  conversationMessage: ConversationMessage
  errors: [ValidationError!]
}

"""A list of students that an `AssignmentOverride` applies to"""
type AdhocStudents {
  students: [User!]
}

type AnonymousUser {
  avatarUrl: String
  id: ID!
  shortName: String!
}

type AssessmentRequest implements Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  anonymizedUser: User
  anonymousId: String
  assetSubmissionType: String
  createdAt: DateTime
  updatedAt: DateTime
  user: User!
  workflowState: String!
}

"""The type of assessment"""
enum AssessmentType {
  grading
  peer_review
  provisional_grade
}

interface AssetString {
  assetString: String
}

type Assignment implements Node & Timestamped & ModuleItemInterface & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  allowGoogleDocsSubmission: Boolean

  """
  The number of submission attempts a student can make for this assignment. null implies unlimited.
  """
  allowedAttempts: Int

  """permitted uploaded file extensions (e.g. ['doc', 'xls', 'txt'])"""
  allowedExtensions: [String!]
  anonymizeStudents: Boolean
  anonymousGrading: Boolean
  anonymousInstructorAnnotations: Boolean
  assessmentRequestsForCurrentUser: [AssessmentRequest!]
  assignmentGroup: AssignmentGroup
  assignmentOverrides(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AssignmentOverrideConnection
  canDuplicate: Boolean
  canUnpublish: Boolean
  course: Course
  createdAt: DateTime
  description: String
  discussion: Discussion

  """when this assignment is due"""
  dueAt(
    "When true, return the overridden dates.\n\nNot all roles have permission to view un-overridden dates (in which\ncase the overridden dates will be returned)\n"
    applyOverrides: Boolean = true
  ): DateTime
  dueDateRequired: Boolean
  expectsExternalSubmission: Boolean
  expectsSubmission: Boolean

  """
  If this is a group assignment, boolean flag indicating whether or not students will be graded individually.
  """
  gradeGroupStudentsIndividually: Boolean
  gradingType: GradingType
  groupCategoryId: Int
  groupSet: GroupSet

  """returns submissions grouped to one submission object per group"""
  groupSubmissionsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: SubmissionSearchFilterInput
    orderBy: [SubmissionSearchOrder!]
  ): SubmissionConnection

  """If true, the assignment has been submitted to by at least one student"""
  hasSubmittedSubmissions: Boolean
  htmlUrl: URL
  id: ID!
  inClosedGradingPeriod: Boolean

  """the lock date (assignment is locked after this date)"""
  lockAt(
    "When true, return the overridden dates.\n\nNot all roles have permission to view un-overridden dates (in which\ncase the overridden dates will be returned)\n"
    applyOverrides: Boolean = true
  ): DateTime
  lockInfo: LockInfo
  moderatedGrading: ModeratedGrading
  modules: [Module!]
  name: String
  needsGradingCount: Int
  nonDigitalSubmission: Boolean

  """If true, the assignment will be omitted from the student's final grade"""
  omitFromFinalGrade: Boolean

  """
  specifies that this assignment is only assigned to students for whom an
         `AssignmentOverride` applies.
  """
  onlyVisibleToOverrides: Boolean!
  originalityReportVisibility: String
  peerReviews: PeerReviews

  """the assignment is out of this many points"""
  pointsPossible: Float

  """
  determines the order this assignment is displayed in in its assignment group
  """
  position: Int
  postPolicy: PostPolicy

  """present if Sync Grades to SIS feature is enabled"""
  postToSis: Boolean
  quiz: Quiz
  rubric: Rubric
  rubricAssociation: RubricAssociation
  sisId: String
  state: AssignmentState!
  submissionTypes: [SubmissionType!]

  """submissions for this assignment"""
  submissionsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: SubmissionSearchFilterInput
    orderBy: [SubmissionSearchOrder!]
  ): SubmissionConnection
  submissionsDownloads: Int
  timeZoneEdited: String

  """the unlock date (assignment is unlocked after this date)"""
  unlockAt(
    "When true, return the overridden dates.\n\nNot all roles have permission to view un-overridden dates (in which\ncase the overridden dates will be returned)\n"
    applyOverrides: Boolean = true
  ): DateTime
  updatedAt: DateTime
}

"""The connection type for Assignment."""
type AssignmentConnection {
  """A list of edges."""
  edges: [AssignmentEdge]

  """A list of nodes."""
  nodes: [Assignment]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type AssignmentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Assignment
}

input AssignmentFilter {
  "only return assignments for the given grading period. Defaults to\nthe current grading period. Pass `null` to return all assignments\n(irrespective of the assignment's grading period)\n"
  gradingPeriodId: ID
}

type AssignmentGroup implements Node & Timestamped & LegacyIDInterface & AssignmentsConnectionInterface {
  """legacy canvas id"""
  _id: ID!

  "returns a list of assignments.\n\n**NOTE**: for courses with grading periods, this will only return grading\nperiods in the current course; see `AssignmentFilter` for more info.\nIn courses with grading periods that don't have students, it is necessary\nto *not* filter by grading period to list assignments.\n"
  assignmentsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: AssignmentFilter
  ): AssignmentConnection
  createdAt: DateTime

  """grades for this assignment group"""
  gradesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: GradesEnrollmentFilter
  ): GradesConnection
  groupWeight: Float
  id: ID!
  name: String
  position: Int
  rules: AssignmentGroupRules
  sisId: String
  state: AssignmentGroupState!
  updatedAt: DateTime
}

"""The connection type for AssignmentGroup."""
type AssignmentGroupConnection {
  """A list of edges."""
  edges: [AssignmentGroupEdge]

  """A list of nodes."""
  nodes: [AssignmentGroup]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type AssignmentGroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: AssignmentGroup
}

type AssignmentGroupRules {
  """The highest N assignments are not included in grade calculations"""
  dropHighest: Int

  """The lowest N assignments are not included in grade calculations"""
  dropLowest: Int
  neverDrop: [Assignment!]
}

"""States that Assignment Group can be in"""
enum AssignmentGroupState {
  available
  deleted
}

input AssignmentModeratedGradingUpdate {
  enabled: Boolean
  graderCount: Int
  graderCommentsVisibleToGraders: Boolean
  graderNamesVisibleToFinalGrader: Boolean
  gradersAnonymousToGraders: Boolean
  finalGraderId: ID
}

type AssignmentOverride implements Node & Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  allDay: Boolean
  assignment: Assignment
  createdAt: DateTime
  dueAt: DateTime

  """ID of the object."""
  id: ID!
  lockAt: DateTime

  """This object specifies what students this override applies to"""
  set: AssignmentOverrideSet
  title: String
  unlockAt: DateTime
  updatedAt: DateTime
}

"""The connection type for AssignmentOverride."""
type AssignmentOverrideConnection {
  """A list of edges."""
  edges: [AssignmentOverrideEdge]

  """A list of nodes."""
  nodes: [AssignmentOverride]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input AssignmentOverrideCreateOrUpdate {
  id: ID
  dueAt: DateTime
  lockAt: DateTime
  unlockAt: DateTime
  sectionId: ID
  groupId: ID
  studentIds: [ID!]
}

"""An edge in a connection."""
type AssignmentOverrideEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: AssignmentOverride
}

"""Objects that can be assigned overridden dates"""
union AssignmentOverrideSet = AdhocStudents | Group | Noop | Section

input AssignmentPeerReviewsUpdate {
  enabled: Boolean
  count: Int
  dueAt: DateTime
  intraReviews: Boolean
  anonymousReviews: Boolean
  automaticReviews: Boolean
}

"""States that an Assignment can be in"""
enum AssignmentState {
  unpublished
  published
  deleted
  duplicating
  failed_to_duplicate
  importing
  fail_to_import
  migrating
  failed_to_migrate
}

interface AssignmentsConnectionInterface {
  "returns a list of assignments.\n\n**NOTE**: for courses with grading periods, this will only return grading\nperiods in the current course; see `AssignmentFilter` for more info.\nIn courses with grading periods that don't have students, it is necessary\nto *not* filter by grading period to list assignments.\n"
  assignmentsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: AssignmentFilter
  ): AssignmentConnection
}

type AuditLogs {
  """A list of all recent graphql mutations run on the specified object"""
  mutationLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    assetString: String!
    startTime: DateTime
    endTime: DateTime
  ): MutationLogConnection
}

"""Determines if/how a leader is chosen for each group"""
enum AutoLeaderPolicy {
  """a leader is chosen at random"""
  random

  """the first student assigned to the group is the leader"""
  first
}

"""Comment bank items"""
type CommentBankItem implements Node & LegacyIDInterface & Timestamped {
  """legacy canvas id"""
  _id: ID!
  comment: String!
  courseId: ID!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  userId: ID!
}

"""The connection type for CommentBankItem."""
type CommentBankItemConnection {
  """A list of edges."""
  edges: [CommentBankItemEdge]

  """A list of nodes."""
  nodes: [CommentBankItem]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CommentBankItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: CommentBankItem
}

type CommunicationChannel implements Node & Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  createdAt: DateTime
  id: ID!
  notificationPolicies(contextType: NotificationPreferencesContextType): [NotificationPolicy!]
  notificationPolicyOverrides(accountId: ID, courseId: ID, contextType: NotificationPreferencesContextType!): [NotificationPolicy!]
  path: String
  pathType: String
  updatedAt: DateTime
}

"""An edge in a connection."""
type ContentTag implements Node & LegacyIDInterface & Timestamped {
  """legacy canvas id"""
  _id: ID!
  canUnlink: Boolean
  createdAt: DateTime

  """A cursor for use in pagination."""
  cursor: String!
  group: LearningOutcomeGroup
  id: ID!

  """The item at the end of the edge."""
  node: ContentTagContent
  updatedAt: DateTime
}

"""The connection type for ContentTagContent."""
type ContentTagConnection {
  """A list of edges."""
  edges: [ContentTag]

  """A list of nodes."""
  nodes: [ContentTagContent]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Content of a Content Tag"""
union ContentTagContent = LearningOutcome

type Conversation implements Node {
  """legacy canvas id"""
  _id: ID!
  canReply: Boolean
  contextId: ID
  contextName: String
  contextType: String
  conversationMessagesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    participants: [ID!]
    createdBefore: DateTime
  ): ConversationMessageConnection
  conversationParticipantsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ConversationParticipantConnection
  id: ID!
  isPrivate: Boolean
  subject: String
  updatedAt: DateTime
}

type ConversationMessage {
  """legacy canvas id"""
  _id: ID!
  attachmentsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): FileConnection
  author: User
  body: String!
  conversationId: ID!
  createdAt: DateTime
  id: ID!
  mediaComment: MediaObject
  recipients: [User!]!
}

"""The connection type for ConversationMessage."""
type ConversationMessageConnection {
  """A list of edges."""
  edges: [ConversationMessageEdge]

  """A list of nodes."""
  nodes: [ConversationMessage]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ConversationMessageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ConversationMessage
}

type ConversationParticipant {
  """legacy canvas id"""
  _id: ID!
  conversation: Conversation!
  id: ID!
  label: String
  messages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ConversationMessageConnection
  subscribed: Boolean!
  updatedAt: DateTime
  user: User
  userId: ID!
  workflowState: String!
}

"""The connection type for ConversationParticipant."""
type ConversationParticipantConnection {
  """A list of edges."""
  edges: [ConversationParticipantEdge]

  """A list of nodes."""
  nodes: [ConversationParticipant]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ConversationParticipantEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ConversationParticipant
}

type Course implements AssetString & Node & Timestamped & LegacyIDInterface & AssignmentsConnectionInterface {
  """legacy canvas id"""
  _id: ID!
  account: Account
  allowFinalGradeOverride: Boolean
  assetString: String
  assignmentGroupsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AssignmentGroupConnection

  "PostPolicies for assignments within a course\n"
  assignmentPostPolicies(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostPolicyConnection

  "returns a list of assignments.\n\n**NOTE**: for courses with grading periods, this will only return grading\nperiods in the current course; see `AssignmentFilter` for more info.\nIn courses with grading periods that don't have students, it is necessary\nto *not* filter by grading period to list assignments.\n"
  assignmentsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: AssignmentFilter
  ): AssignmentConnection

  """course short name"""
  courseCode: String
  createdAt: DateTime
  enrollmentsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: EnrollmentFilterInput
  ): EnrollmentConnection
  externalToolsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: ExternalToolFilterInput = {state: null, placement: null}
  ): ExternalToolConnection
  gradingPeriodsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GradingPeriodConnection

  "Project group sets for this course.\n"
  groupSetsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GroupSetConnection
  groupsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GroupConnection
  id: ID!

  "Returns a URL for the course image (this is the image used on dashboard\ncourse cards)\n"
  imageUrl: URL
  modulesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ModuleConnection
  name: String!
  outcomeAlignmentStats: CourseOutcomeAlignmentStats
  outcomeCalculationMethod: OutcomeCalculationMethod
  outcomeProficiency: OutcomeProficiency

  """returns permission information for the current user in this course"""
  permissions: CoursePermissions

  """A course-specific post policy"""
  postPolicy: PostPolicy
  rootOutcomeGroup: LearningOutcomeGroup!
  sectionsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SectionConnection
  sisId: String
  state: CourseWorkflowState!

  """all the submissions for assignments in this course"""
  submissionsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Only return submissions for the given students."""
    studentIds: [ID!]
    orderBy: [SubmissionOrderCriteria!]
    filter: SubmissionFilterInput
  ): SubmissionConnection
  syllabusBody: String
  term: Term
  updatedAt: DateTime
  usersConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    "Only include users with the given ids.\n\n**This field is deprecated, use `filter: {userIds}` instead.**\n"
    userIds: [ID!]
    filter: CourseUsersFilter
  ): UserConnection
}

"""The connection type for Course."""
type CourseConnection {
  """A list of edges."""
  edges: [CourseEdge]

  """A list of nodes."""
  nodes: [Course]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CourseEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Course
}

"""Users in a course can be returned based on these enrollment states"""
enum CourseFilterableEnrollmentState {
  invited
  creation_pending
  active
  rejected
  completed
  inactive
}

"""Users in a course can be returned based on these enrollment types"""
enum CourseFilterableEnrollmentType {
  StudentEnrollment
  TeacherEnrollment
  TaEnrollment
  ObserverEnrollment
  DesignerEnrollment
  StudentViewEnrollment
}

type CourseOutcomeAlignmentStats {
  alignedArtifacts: Int
  alignedOutcomes: Int
  artifactAlignments: Int
  totalAlignments: Int
  totalArtifacts: Int
  totalOutcomes: Int
}

type CoursePermissions {
  becomeUser: Boolean
  manageGrades: Boolean
  sendMessages: Boolean
  viewAllGrades: Boolean
  viewAnalytics: Boolean
}

input CourseUsersFilter {
  """only include users with the given ids"""
  userIds: [ID!]

  "only return users with the given enrollment state. defaults\nto `invited`, `creation_pending`, `active`\n"
  enrollmentStates: [CourseFilterableEnrollmentState!]

  """Only return users with the specified enrollment types"""
  enrollmentTypes: [CourseFilterableEnrollmentType!]
}

"""States that Courses can be in"""
enum CourseWorkflowState {
  created
  claimed
  available
  completed
  deleted
}

"""Autogenerated input type of CreateAccountDomainLookup"""
input CreateAccountDomainLookupInput {
  accountDomainId: ID!
  authenticationProvider: String
  name: String!
}

"""Autogenerated return type of CreateAccountDomainLookup"""
type CreateAccountDomainLookupPayload {
  accountDomainLookup: AccountDomainLookup
  errors: [ValidationError!]
}

"""Autogenerated input type of CreateAssignment"""
input CreateAssignmentInput {
  state: AssignmentState
  dueAt: DateTime
  lockAt: DateTime
  unlockAt: DateTime
  description: String
  assignmentOverrides: [AssignmentOverrideCreateOrUpdate!]
  position: Int
  pointsPossible: Float
  gradingType: GradingType
  allowedExtensions: [String!]
  assignmentGroupId: ID
  groupSetId: ID
  allowedAttempts: Int
  onlyVisibleToOverrides: Boolean
  submissionTypes: [SubmissionType!]
  peerReviews: AssignmentPeerReviewsUpdate
  moderatedGrading: AssignmentModeratedGradingUpdate
  gradeGroupStudentsIndividually: Boolean
  groupCategoryId: ID
  omitFromFinalGrade: Boolean
  anonymousInstructorAnnotations: Boolean
  postToSis: Boolean

  """requires anonymous_marking course feature to be set to true"""
  anonymousGrading: Boolean
  moduleIds: [ID!]
  courseId: ID!
  name: String!
}

"""Autogenerated return type of CreateAssignment"""
type CreateAssignmentPayload {
  assignment: Assignment
  errors: [ValidationError!]
}

"""Autogenerated input type of CreateCommentBankItem"""
input CreateCommentBankItemInput {
  courseId: ID!
  comment: String!
}

"""Autogenerated return type of CreateCommentBankItem"""
type CreateCommentBankItemPayload {
  commentBankItem: CommentBankItem
  errors: [ValidationError!]
}

"""Autogenerated input type of CreateConversation"""
input CreateConversationInput {
  recipients: [String!]!
  subject: String
  body: String!
  bulkMessage: Boolean
  forceNew: Boolean
  groupConversation: Boolean
  attachmentIds: [ID!]
  mediaCommentId: ID
  mediaCommentType: String
  contextCode: String
  conversationId: ID
  userNote: Boolean
  tags: [String!]
}

"""Autogenerated return type of CreateConversation"""
type CreateConversationPayload {
  conversations: [ConversationParticipant!]
  errors: [ValidationError!]
}

"""Autogenerated input type of CreateDiscussionEntryDraft"""
input CreateDiscussionEntryDraftInput {
  discussionTopicId: ID!
  discussionEntryId: ID
  parentId: ID
  fileId: ID
  message: String!
  includeReplyPreview: Boolean
}

"""Autogenerated return type of CreateDiscussionEntryDraft"""
type CreateDiscussionEntryDraftPayload {
  discussionEntryDraft: DiscussionEntryDraft
  errors: [ValidationError!]
}

"""Autogenerated input type of CreateDiscussionEntry"""
input CreateDiscussionEntryInput {
  discussionTopicId: ID!
  message: String!
  parentEntryId: ID
  fileId: ID
  includeReplyPreview: Boolean
  isAnonymousAuthor: Boolean
}

"""Autogenerated return type of CreateDiscussionEntry"""
type CreateDiscussionEntryPayload {
  discussionEntry: DiscussionEntry
  errors: [ValidationError!]
}

"""Autogenerated input type of CreateGroupInSet"""
input CreateGroupInSetInput {
  name: String!
  groupSetId: ID!
}

"""Autogenerated return type of CreateGroupInSet"""
type CreateGroupInSetPayload {
  errors: [ValidationError!]
  group: Group
}

"""Autogenerated input type of CreateInternalSetting"""
input CreateInternalSettingInput {
  name: String!
  value: String!
}

"""Autogenerated return type of CreateInternalSetting"""
type CreateInternalSettingPayload {
  errors: [ValidationError!]
  internalSetting: InternalSetting
}

"""Autogenerated input type of CreateLearningOutcomeGroup"""
input CreateLearningOutcomeGroupInput {
  id: ID!
  title: String!
  description: String
  vendorGuid: String
}

"""Autogenerated return type of CreateLearningOutcomeGroup"""
type CreateLearningOutcomeGroupPayload {
  errors: [ValidationError!]
  learningOutcomeGroup: LearningOutcomeGroup
}

"""Autogenerated input type of CreateLearningOutcome"""
input CreateLearningOutcomeInput {
  title: String!
  description: String
  displayName: String
  vendorGuid: String
  calculationMethod: String
  calculationInt: Int
  masteryPoints: Float
  ratings: [ProficiencyRatingInput!]
  groupId: ID!
}

"""Autogenerated return type of CreateLearningOutcome"""
type CreateLearningOutcomePayload {
  errors: [ValidationError!]
  learningOutcome: LearningOutcome
}

"""Autogenerated input type of CreateModule"""
input CreateModuleInput {
  name: String!
  courseId: ID!
}

"""Autogenerated return type of CreateModule"""
type CreateModulePayload {
  errors: [ValidationError!]
  module: Module
}

"""Autogenerated input type of CreateOutcomeCalculationMethod"""
input CreateOutcomeCalculationMethodInput {
  contextType: String!
  contextId: ID!
  calculationMethod: String!
  calculationInt: Int
}

"""Autogenerated return type of CreateOutcomeCalculationMethod"""
type CreateOutcomeCalculationMethodPayload {
  errors: [ValidationError!]
  outcomeCalculationMethod: OutcomeCalculationMethod
}

"""Autogenerated input type of CreateOutcomeProficiency"""
input CreateOutcomeProficiencyInput {
  contextType: String!
  contextId: ID!
  proficiencyRatings: [OutcomeProficiencyRatingCreate!]!
}

"""Autogenerated return type of CreateOutcomeProficiency"""
type CreateOutcomeProficiencyPayload {
  errors: [ValidationError!]
  outcomeProficiency: OutcomeProficiency
}

"""Autogenerated input type of CreateSubmissionComment"""
input CreateSubmissionCommentInput {
  submissionId: ID!
  attempt: Int
  comment: String!
  fileIds: [ID!]
  mediaObjectId: ID
  mediaObjectType: String
  reviewerSubmissionId: ID
}

"""Autogenerated return type of CreateSubmissionComment"""
type CreateSubmissionCommentPayload {
  errors: [ValidationError!]
  submissionComment: SubmissionComment
}

"""Autogenerated input type of CreateSubmissionDraft"""
input CreateSubmissionDraftInput {
  activeSubmissionType: DraftableSubmissionType!
  attempt: Int
  body: String
  externalToolId: ID
  fileIds: [ID!]
  ltiLaunchUrl: String
  mediaId: ID
  resourceLinkLookupUuid: String
  submissionId: ID!
  url: String
}

"""Autogenerated return type of CreateSubmissionDraft"""
type CreateSubmissionDraftPayload {
  errors: [ValidationError!]
  submissionDraft: SubmissionDraft
}

"""Autogenerated input type of CreateSubmission"""
input CreateSubmissionInput {
  annotatableAttachmentId: ID
  assignmentId: ID!
  body: String
  fileIds: [ID!]
  mediaId: ID
  resourceLinkLookupUuid: String
  submissionType: OnlineSubmissionType!
  url: String
}

"""Autogenerated return type of CreateSubmission"""
type CreateSubmissionPayload {
  errors: [ValidationError!]
  submission: Submission
}

"""an ISO8601 formatted time string"""
scalar DateTime

"""Autogenerated input type of DeleteAccountDomainLookup"""
input DeleteAccountDomainLookupInput {
  id: ID!
}

"""Autogenerated return type of DeleteAccountDomainLookup"""
type DeleteAccountDomainLookupPayload {
  accountDomainLookupId: ID
  errors: [ValidationError!]
}

"""Autogenerated input type of DeleteCommentBankItem"""
input DeleteCommentBankItemInput {
  id: ID!
}

"""Autogenerated return type of DeleteCommentBankItem"""
type DeleteCommentBankItemPayload {
  commentBankItemId: ID!
  errors: [ValidationError!]
}

"""Autogenerated input type of DeleteConversationMessages"""
input DeleteConversationMessagesInput {
  ids: [ID!]!
}

"""Autogenerated return type of DeleteConversationMessages"""
type DeleteConversationMessagesPayload {
  conversationMessageIds: [ID!]!
  errors: [ValidationError!]
}

"""Autogenerated input type of DeleteConversations"""
input DeleteConversationsInput {
  ids: [ID!]!
}

"""Autogenerated return type of DeleteConversations"""
type DeleteConversationsPayload {
  conversationIds: [ID!]
  errors: [ValidationError!]
}

"""Autogenerated input type of DeleteDiscussionEntry"""
input DeleteDiscussionEntryInput {
  id: ID!
}

"""Autogenerated return type of DeleteDiscussionEntry"""
type DeleteDiscussionEntryPayload {
  discussionEntry: DiscussionEntry
  errors: [ValidationError!]
}

"""Autogenerated input type of DeleteDiscussionTopic"""
input DeleteDiscussionTopicInput {
  id: ID!
}

"""Autogenerated return type of DeleteDiscussionTopic"""
type DeleteDiscussionTopicPayload {
  discussionTopicId: ID!
  errors: [ValidationError!]
}

"""Autogenerated input type of DeleteInternalSetting"""
input DeleteInternalSettingInput {
  internalSettingId: ID!
}

"""Autogenerated return type of DeleteInternalSetting"""
type DeleteInternalSettingPayload {
  errors: [ValidationError!]
  internalSettingId: ID!
}

"""Autogenerated input type of DeleteOutcomeCalculationMethod"""
input DeleteOutcomeCalculationMethodInput {
  id: ID!
}

"""Autogenerated return type of DeleteOutcomeCalculationMethod"""
type DeleteOutcomeCalculationMethodPayload {
  errors: [ValidationError!]
  outcomeCalculationMethodId: ID!
}

"""Autogenerated input type of DeleteOutcomeLinks"""
input DeleteOutcomeLinksInput {
  ids: [ID!]!
}

"""Autogenerated return type of DeleteOutcomeLinks"""
type DeleteOutcomeLinksPayload {
  deletedOutcomeLinkIds: [ID!]!
  errors: [ValidationError!]
}

"""Autogenerated input type of DeleteOutcomeProficiency"""
input DeleteOutcomeProficiencyInput {
  id: ID!
}

"""Autogenerated return type of DeleteOutcomeProficiency"""
type DeleteOutcomeProficiencyPayload {
  errors: [ValidationError!]
  outcomeProficiencyId: ID!
}

"""Autogenerated input type of DeleteSubmissionDraft"""
input DeleteSubmissionDraftInput {
  submissionId: ID!
}

"""Autogenerated return type of DeleteSubmissionDraft"""
type DeleteSubmissionDraftPayload {
  errors: [ValidationError!]
  submissionDraftIds: [ID!]
}

type Discussion implements Node & Timestamped & ModuleItemInterface & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  allowRating: Boolean
  anonymousAuthor: AnonymousUser
  anonymousState: String
  assignment: Assignment
  attachment: File
  author(
    courseId: String

    """Return only requested base role types"""
    roleTypes: [String!]

    """Only return default/built_in roles"""
    builtInOnly: Boolean
  ): User
  availableForUser: Boolean!
  canReplyAnonymously: Boolean!
  canUnpublish: Boolean!
  childTopics: [Discussion!]
  contextId: ID!
  contextName: String
  contextType: String!
  courseSections: [Section!]!
  createdAt: DateTime
  delayedPostAt: DateTime
  discussionEntriesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    searchTerm: String
    filter: DiscussionFilterType
    sortOrder: DiscussionSortOrderType
    rootEntries: Boolean
    userSearchId: String
    unreadBefore: String
  ): DiscussionEntryConnection
  discussionEntryDraftsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): DiscussionEntryDraftConnection
  discussionType: String
  editor(
    courseId: String

    """Return only requested base role types"""
    roleTypes: [String!]

    """Only return default/built_in roles"""
    builtInOnly: Boolean
  ): User
  entriesTotalPages(perPage: Int!, searchTerm: String, filter: DiscussionFilterType, sortOrder: DiscussionSortOrderType, rootEntries: Boolean, unreadBefore: String): Int
  entryCounts: DiscussionEntryCounts
  groupSet: GroupSet
  id: ID!
  initialPostRequiredForCurrentUser: Boolean!
  isAnnouncement: Boolean!
  isSectionSpecific: Boolean
  lastReplyAt: DateTime
  lockAt: DateTime
  locked: Boolean!
  mentionableUsersConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    searchTerm: String
  ): MessageableUserConnection
  message: String
  modules: [Module!]
  onlyGradersCanRate: Boolean
  permissions: DiscussionPermissions
  podcastHasStudentPosts: Boolean
  position: Int
  postedAt: DateTime
  published: Boolean!
  requireInitialPost: Boolean
  rootEntriesTotalPages(perPage: Int!, searchTerm: String, filter: DiscussionFilterType, sortOrder: DiscussionSortOrderType): Int
  rootTopic: Discussion
  searchEntryCount(searchTerm: String, filter: DiscussionFilterType): Int
  sortByRating: Boolean
  subscribed: Boolean!
  title: String
  updatedAt: DateTime
  userCount: Int
}

type DiscussionEntry implements Node & Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  anonymousAuthor: AnonymousUser
  attachment: File
  author(
    courseId: String

    """Return only requested base role types"""
    roleTypes: [String!]

    """Only return default/built_in roles"""
    builtInOnly: Boolean
  ): User
  createdAt: DateTime
  deleted: Boolean
  depth: Int
  discussionEntryVersionsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): DiscussionEntryVersionConnection
  discussionSubentriesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    sortOrder: DiscussionSortOrderType
    relativeEntryId: ID
    beforeRelativeEntry: Boolean
    includeRelativeEntry: Boolean
  ): DiscussionEntryConnection
  discussionTopic: Discussion!
  discussionTopicId: ID!
  editor(
    courseId: String

    """Return only requested base role types"""
    roleTypes: [String!]

    """Only return default/built_in roles"""
    builtInOnly: Boolean
  ): User
  entryParticipant: EntryParticipant
  id: ID!
  isolatedEntryId: ID
  lastReply: DiscussionEntry
  message: String
  parentId: ID
  permissions: DiscussionEntryPermissions
  previewMessage: String
  quotedEntry: DiscussionEntry
  ratingCount: Int
  ratingSum: Int
  rootEntry: DiscussionEntry
  rootEntryId: ID
  rootEntryParticipantCounts: DiscussionEntryCounts
  subentriesCount: Int
  updatedAt: DateTime
}

"""The connection type for DiscussionEntry."""
type DiscussionEntryConnection {
  """A list of edges."""
  edges: [DiscussionEntryEdge]

  """A list of nodes."""
  nodes: [DiscussionEntry]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type DiscussionEntryCounts {
  deletedCount: Int!
  repliesCount: Int!
  unreadCount: Int!
}

type DiscussionEntryDraft implements Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  attachment: File
  createdAt: DateTime
  discussionEntryId: ID
  discussionTopicId: ID!
  id: ID!
  includeReplyPreview: Boolean!
  message: String!
  parentId: ID
  rootEntryId: ID
  updatedAt: DateTime
}

"""The connection type for DiscussionEntryDraft."""
type DiscussionEntryDraftConnection {
  """A list of edges."""
  edges: [DiscussionEntryDraftEdge]

  """A list of nodes."""
  nodes: [DiscussionEntryDraft]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type DiscussionEntryDraftEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: DiscussionEntryDraft
}

"""An edge in a connection."""
type DiscussionEntryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: DiscussionEntry
}

type DiscussionEntryPermissions {
  attach: Boolean
  create: Boolean
  delete: Boolean
  rate: Boolean
  read: Boolean
  reply: Boolean
  update: Boolean
  viewRating: Boolean
}

type DiscussionEntryVersion implements Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  createdAt: DateTime
  id: ID!
  message: String!
  updatedAt: DateTime
  version: Int!
}

"""The connection type for DiscussionEntryVersion."""
type DiscussionEntryVersionConnection {
  """A list of edges."""
  edges: [DiscussionEntryVersionEdge]

  """A list of nodes."""
  nodes: [DiscussionEntryVersion]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type DiscussionEntryVersionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: DiscussionEntryVersion
}

"""Search types that can be associated with discussions"""
enum DiscussionFilterType {
  all
  unread
  drafts
  deleted
}

type DiscussionPermissions {
  addRubric: Boolean
  attach: Boolean
  closeForComments: Boolean
  copyAndSendTo: Boolean
  create: Boolean
  delete: Boolean
  duplicate: Boolean
  manageContent: Boolean
  manageCourseContentAdd: Boolean
  manageCourseContentDelete: Boolean
  manageCourseContentEdit: Boolean
  moderateForum: Boolean
  openForComments: Boolean
  peerReview: Boolean
  rate: Boolean
  read: Boolean
  readAsAdmin: Boolean
  readReplies: Boolean
  reply: Boolean
  showRubric: Boolean
  speedGrader: Boolean
  studentReporting: Boolean
  update: Boolean
}

enum DiscussionSortOrderType {
  asc
  desc
}

"""Types of submissions that can have a submission draft"""
enum DraftableSubmissionType {
  basic_lti_launch
  media_recording
  online_text_entry
  online_upload
  online_url
  student_annotation
}

type Enrollment implements Node & Timestamped & LegacyIDInterface & AssetString {
  """legacy canvas id"""
  _id: ID!
  assetString: String
  associatedUser: User
  canBeRemoved: Boolean
  course: Course
  createdAt: DateTime
  grades(
    """
    The grading period to return grades for. If not specified, will use the current grading period (or the course grade for courses that don't use grading periods)
    """
    gradingPeriodId: ID
  ): Grades
  htmlUrl: URL
  id: ID!
  lastActivityAt: DateTime
  section: Section
  sisRole: String
  state: EnrollmentWorkflowState!
  totalActivityTime: Int
  type: EnrollmentType!
  updatedAt: DateTime
  user: User
}

"""The connection type for Enrollment."""
type EnrollmentConnection {
  """A list of edges."""
  edges: [EnrollmentEdge]

  """A list of nodes."""
  nodes: [Enrollment]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type EnrollmentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Enrollment
}

input EnrollmentFilterInput {
  types: [EnrollmentType!] = null
  associatedUserIds: [ID!] = []
}

enum EnrollmentType {
  StudentEnrollment
  TeacherEnrollment
  TaEnrollment
  ObserverEnrollment
  DesignerEnrollment
  StudentViewEnrollment
}

enum EnrollmentWorkflowState {
  invited
  creation_pending
  active
  deleted
  rejected
  completed
  inactive
}

type EntryParticipant {
  forcedReadState: Boolean
  rating: Boolean
  read: Boolean!
  reportType: String
}

type ExternalTool implements Timestamped & ModuleItemInterface & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  createdAt: DateTime
  description: String
  modules: [Module!]
  name: String
  settings: ExternalToolSettings
  state: ExternalToolState
  updatedAt: DateTime
  url: URL
}

"""The connection type for ExternalTool."""
type ExternalToolConnection {
  """A list of edges."""
  edges: [ExternalToolEdge]

  """A list of nodes."""
  nodes: [ExternalTool]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ExternalToolEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ExternalTool
}

input ExternalToolFilterInput {
  state: ExternalToolState = null
  placement: ExternalToolPlacement = null
}

"""Placements that an External Tool can have"""
enum ExternalToolPlacement {
  homework_submission
}

type ExternalToolPlacements {
  canvasIconClass: String
  iconUrl: URL
  messageType: String
  text: String
  url: URL
}

type ExternalToolSettings {
  homeworkSubmission: ExternalToolPlacements
  iconUrl: URL
  selectionHeight: Int
  selectionWidth: Int
  text: String
}

"""States that an External Tool can be in"""
enum ExternalToolState {
  anonymous
  name_only
  email_only
  public
}

type ExternalUrl implements Timestamped & ModuleItemInterface & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  createdAt: DateTime
  modules: [Module!]
  title: String
  updatedAt: DateTime
  url: String
}

type File implements Node & ModuleItemInterface & Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  contentType: String
  createdAt: DateTime
  displayName: String
  id: ID!
  mimeClass: String
  modules: [Module!]
  size: String
  submissionPreviewUrl(submissionId: ID!): URL
  thumbnailUrl: URL
  updatedAt: DateTime
  url: URL
}

"""The connection type for File."""
type FileConnection {
  """A list of edges."""
  edges: [FileEdge]

  """A list of nodes."""
  nodes: [File]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type FileEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: File
}

enum GradeState {
  active
  deleted
}

"""Contains grade information for a course or grading period"""
type Grades {
  assignmentGroup: AssignmentGroup
  currentGrade: String

  "The current score includes all graded assignments, excluding muted submissions.\n"
  currentScore: Float
  enrollment: Enrollment
  finalGrade: String

  "The final score includes all assignments, excluding muted submissions\n(ungraded assignments are counted as 0 points).\n"
  finalScore: Float
  gradingPeriod: GradingPeriod

  "The override grade. Supersedes the computed final grade if set.\n"
  overrideGrade: String

  "The override score. Supersedes the computed final score if set.\n"
  overrideScore: Float
  state: GradeState!
  unpostedCurrentGrade: String

  "The current score includes all graded assignments, including muted submissions.\n"
  unpostedCurrentScore: Float
  unpostedFinalGrade: String

  "The final score includes all assignments, including muted submissions\n(ungraded assignments are counted as 0 points).\n"
  unpostedFinalScore: Float
}

"""The connection type for Grades."""
type GradesConnection {
  """A list of edges."""
  edges: [GradesEdge]

  """A list of nodes."""
  nodes: [Grades]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type GradesEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Grades
}

input GradesEnrollmentFilter {
  """only include users with the given enrollment ids"""
  enrollmentIds: [ID!]
}

type GradingPeriod implements Node & Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!

  "assignments can only be graded before the grading period closes\n"
  closeDate: DateTime
  createdAt: DateTime
  endDate: DateTime
  id: ID!
  startDate: DateTime
  title: String
  updatedAt: DateTime

  "used to calculate how much the assignments in this grading period\ncontribute to the overall grade\n"
  weight: Float
}

"""The connection type for GradingPeriod."""
type GradingPeriodConnection {
  """A list of edges."""
  edges: [GradingPeriodEdge]

  """A list of nodes."""
  nodes: [GradingPeriod]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type GradingPeriodEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GradingPeriod
}

enum GradingType {
  points
  percent
  letter_grade
  gpa_scale
  pass_fail
  not_graded
}

type Group implements Node & Timestamped & LegacyIDInterface & AssetString {
  """legacy canvas id"""
  _id: ID!
  assetString: String
  createdAt: DateTime
  id: ID!
  member(userId: ID!): GroupMembership
  membersConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GroupMembershipConnection
  membersCount: Int
  name: String
  sisId: String
  updatedAt: DateTime
}

"""The connection type for Group."""
type GroupConnection {
  """A list of edges."""
  edges: [GroupEdge]

  """A list of nodes."""
  nodes: [Group]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type GroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Group
}

type GroupMembership implements Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  createdAt: DateTime
  state: GroupMembershipState!
  updatedAt: DateTime
  user: User
}

"""The connection type for GroupMembership."""
type GroupMembershipConnection {
  """A list of edges."""
  edges: [GroupMembershipEdge]

  """A list of nodes."""
  nodes: [GroupMembership]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type GroupMembershipEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GroupMembership
}

enum GroupMembershipState {
  accepted
  invited
  requested
  rejected
  deleted
}

type GroupSet implements Node & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  autoLeader: AutoLeaderPolicy
  currentGroup: Group
  groupsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GroupConnection
  id: ID!

  "Sets a cap on the number of members in the group.  Only applies when\nself-signup is enabled.\n"
  memberLimit: Int
  name: String
  selfSignup: SelfSignupPolicy!
  sisId: String
}

"""The connection type for GroupSet."""
type GroupSetConnection {
  """A list of edges."""
  edges: [GroupSetEdge]

  """A list of nodes."""
  nodes: [GroupSet]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type GroupSetEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GroupSet
}

"""Autogenerated input type of HideAssignmentGradesForSections"""
input HideAssignmentGradesForSectionsInput {
  assignmentId: ID!
  sectionIds: [ID!]!
}

"""Autogenerated return type of HideAssignmentGradesForSections"""
type HideAssignmentGradesForSectionsPayload {
  assignment: Assignment
  errors: [ValidationError!]
  progress: Progress
  sections: [Section!]
}

"""Autogenerated input type of HideAssignmentGrades"""
input HideAssignmentGradesInput {
  assignmentId: ID!
  sectionIds: [ID!]
  onlyStudentIds: [ID!]
  skipStudentIds: [ID!]
}

"""Autogenerated return type of HideAssignmentGrades"""
type HideAssignmentGradesPayload {
  assignment: Assignment
  errors: [ValidationError!]
  progress: Progress
  sections: [Section!]
}

"""Autogenerated input type of ImportOutcomes"""
input ImportOutcomesInput {
  groupId: ID
  outcomeId: ID
  sourceContextId: ID
  sourceContextType: String
  targetGroupId: ID
  targetContextId: ID
  targetContextType: String
}

"""Autogenerated return type of ImportOutcomes"""
type ImportOutcomesPayload {
  errors: [ValidationError!]
  progress: Progress
}

type InternalSetting implements Node & Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  createdAt: DateTime
  id: ID!
  name: String!
  secret: Boolean!
  updatedAt: DateTime
  value: String
}

"""Represents untyped JSON"""
scalar JSON

enum LatePolicyStatusType {
  late
  missing
  extended
  none
}

type LearningOutcome implements Node & LegacyIDInterface & Timestamped {
  """legacy canvas id"""
  _id: ID!
  alignments(contextId: ID!, contextType: String!): [OutcomeAlignment!]
  assessed: Boolean!
  calculationInt: Int
  calculationMethod: String
  canEdit: Boolean!
  contextId: ID
  contextType: String
  createdAt: DateTime
  description: String
  displayName: String
  friendlyDescription(contextId: ID!, contextType: String!): OutcomeFriendlyDescriptionType
  id: ID!
  isImported(targetContextId: ID!, targetContextType: String!): Boolean
  masteryPoints: Float
  pointsPossible: Float
  ratings: [ProficiencyRating!]
  title: String!
  updatedAt: DateTime
  vendorGuid: String
}

"""Learning Outcome Group"""
type LearningOutcomeGroup implements Node & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  canEdit: Boolean!
  childGroups(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): LearningOutcomeGroupConnection
  childGroupsCount: Int!
  contextId: ID
  contextType: String
  description: String
  id: ID!
  notImportedOutcomesCount(targetGroupId: ID): Int
  outcomes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    searchQuery: String
    filter: String
  ): ContentTagConnection!
  outcomesCount(searchQuery: String): Int!
  parentOutcomeGroup: LearningOutcomeGroup
  title: String!
  vendorGuid: String
}

"""The connection type for LearningOutcomeGroup."""
type LearningOutcomeGroupConnection {
  """A list of edges."""
  edges: [LearningOutcomeGroupEdge]

  """A list of nodes."""
  nodes: [LearningOutcomeGroup]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type LearningOutcomeGroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: LearningOutcomeGroup
}

interface LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
}

type LockInfo {
  canView: Boolean
  isLocked: Boolean!
  lockAt: DateTime
  lockedObject: Lockable
  module: Module
  unlockAt: DateTime
}

"""Types that can be locked"""
union Lockable = Assignment | Discussion | Module | Page | Quiz

"""Autogenerated input type of MarkSubmissionCommentsRead"""
input MarkSubmissionCommentsReadInput {
  submissionCommentIds: [ID!]!
  submissionId: ID!
}

"""Autogenerated return type of MarkSubmissionCommentsRead"""
type MarkSubmissionCommentsReadPayload {
  errors: [ValidationError!]
  submissionComments: [SubmissionComment!]
}

type MediaObject implements Node {
  """legacy canvas id"""
  _id: ID!
  canAddCaptions: Boolean
  id: ID!
  mediaSources: [MediaSource!]
  mediaTracks: [MediaTrack!]
  mediaType: MediaType
  title: String
}

type MediaSource {
  bitrate: String
  contentType: String
  fileExt: String
  height: String
  isOriginal: String
  size: String
  url: URL
  width: String
}

type MediaTrack implements LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  content: String!
  kind: String
  locale: String
  mediaObject: MediaObject
  webvttContent: String
}

enum MediaType {
  audio
  video
}

type MessagePermissions {
  sendMessages: Boolean!
  sendMessagesAll: Boolean!
}

type MessageableContext implements Node {
  avatarUrl: String!
  id: ID!
  itemCount: Int
  name: String!
  permissions: MessagePermissions
  userCount: Int
}

"""The connection type for MessageableContext."""
type MessageableContextConnection {
  """A list of edges."""
  edges: [MessageableContextEdge]

  """A list of nodes."""
  nodes: [MessageableContext]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type MessageableContextEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: MessageableContext
}

type MessageableUser implements Node {
  """legacy canvas id"""
  _id: ID!
  commonCoursesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): EnrollmentConnection
  commonGroupsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GroupConnection
  id: ID!
  name: String!
  observerEnrollmentsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    contextCode: String!
  ): EnrollmentConnection
}

"""The connection type for MessageableUser."""
type MessageableUserConnection {
  """A list of edges."""
  edges: [MessageableUserEdge]

  """A list of nodes."""
  nodes: [MessageableUser]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type MessageableUserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: MessageableUser
}

"""Settings for Moderated Grading on an Assignment"""
type ModeratedGrading {
  """Boolean indicating if the assignment is moderated."""
  enabled: Boolean

  """
  The user of the grader responsible for choosing final grades for this assignment.
  """
  finalGrader: User

  """
  Boolean indicating if provisional graders' comments are visible to other provisional graders.
  """
  graderCommentsVisibleToGraders: Boolean

  """
  The maximum number of provisional graders who may issue grades for this assignment.
  """
  graderCount: Int

  """
  Boolean indicating if provisional graders' identities are hidden from other provisional graders.
  """
  graderNamesVisibleToFinalGrader: Boolean

  """
  Boolean indicating if provisional grader identities are visible to the final grader.
  """
  gradersAnonymousToGraders: Boolean
}

type Module implements Node & Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  createdAt: DateTime
  id: ID!
  moduleItems: [ModuleItem!]
  name: String
  position: Int
  unlockAt: DateTime
  updatedAt: DateTime
}

"""The connection type for Module."""
type ModuleConnection {
  """A list of edges."""
  edges: [ModuleEdge]

  """A list of nodes."""
  nodes: [Module]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ModuleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Module
}

type ModuleExternalTool implements Timestamped & ModuleItemInterface & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  createdAt: DateTime
  modules: [Module!]
  updatedAt: DateTime
  url: String
}

type ModuleItem implements Node & Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  content: ModuleItemInterface
  createdAt: DateTime
  id: ID!
  module: Module
  next: ModuleItem
  previous: ModuleItem
  updatedAt: DateTime
  url: URL
}

"""An item that can be in context modules"""
interface ModuleItemInterface {
  modules: [Module!]
}

"""Autogenerated input type of MoveOutcomeLinks"""
input MoveOutcomeLinksInput {
  "A list of ContentTags that will be moved\n"
  outcomeLinkIds: [ID!]!

  "The id of the destination group\n"
  groupId: ID!
}

"""Autogenerated return type of MoveOutcomeLinks"""
type MoveOutcomeLinksPayload {
  errors: [ValidationError!]

  "List of Outcome Links that were sucessfully moved to the group\n"
  movedOutcomeLinks: [ContentTag!]!
}

type Mutation {
  addConversationMessage(input: AddConversationMessageInput!): AddConversationMessagePayload
  createAccountDomainLookup(input: CreateAccountDomainLookupInput!): CreateAccountDomainLookupPayload
  createAssignment(input: CreateAssignmentInput!): CreateAssignmentPayload
  createCommentBankItem(input: CreateCommentBankItemInput!): CreateCommentBankItemPayload
  createConversation(input: CreateConversationInput!): CreateConversationPayload
  createDiscussionEntry(input: CreateDiscussionEntryInput!): CreateDiscussionEntryPayload
  createDiscussionEntryDraft(input: CreateDiscussionEntryDraftInput!): CreateDiscussionEntryDraftPayload
  createGroupInSet(input: CreateGroupInSetInput!): CreateGroupInSetPayload
  createInternalSetting(input: CreateInternalSettingInput!): CreateInternalSettingPayload
  createLearningOutcome(input: CreateLearningOutcomeInput!): CreateLearningOutcomePayload
  createLearningOutcomeGroup(input: CreateLearningOutcomeGroupInput!): CreateLearningOutcomeGroupPayload
  createModule(input: CreateModuleInput!): CreateModulePayload
  createOutcomeCalculationMethod(input: CreateOutcomeCalculationMethodInput!): CreateOutcomeCalculationMethodPayload
  createOutcomeProficiency(input: CreateOutcomeProficiencyInput!): CreateOutcomeProficiencyPayload

  "IN ACTIVE DEVELOPMENT, USE AT YOUR OWN RISK: Submit homework on an assignment.\n"
  createSubmission(input: CreateSubmissionInput!): CreateSubmissionPayload
  createSubmissionComment(input: CreateSubmissionCommentInput!): CreateSubmissionCommentPayload
  createSubmissionDraft(input: CreateSubmissionDraftInput!): CreateSubmissionDraftPayload
  deleteAccountDomainLookup(input: DeleteAccountDomainLookupInput!): DeleteAccountDomainLookupPayload
  deleteCommentBankItem(input: DeleteCommentBankItemInput!): DeleteCommentBankItemPayload
  deleteConversationMessages(input: DeleteConversationMessagesInput!): DeleteConversationMessagesPayload
  deleteConversations(input: DeleteConversationsInput!): DeleteConversationsPayload
  deleteDiscussionEntry(input: DeleteDiscussionEntryInput!): DeleteDiscussionEntryPayload
  deleteDiscussionTopic(input: DeleteDiscussionTopicInput!): DeleteDiscussionTopicPayload
  deleteInternalSetting(input: DeleteInternalSettingInput!): DeleteInternalSettingPayload
  deleteOutcomeCalculationMethod(input: DeleteOutcomeCalculationMethodInput!): DeleteOutcomeCalculationMethodPayload
  deleteOutcomeLinks(input: DeleteOutcomeLinksInput!): DeleteOutcomeLinksPayload
  deleteOutcomeProficiency(input: DeleteOutcomeProficiencyInput!): DeleteOutcomeProficiencyPayload
  deleteSubmissionDraft(input: DeleteSubmissionDraftInput!): DeleteSubmissionDraftPayload
  hideAssignmentGrades(input: HideAssignmentGradesInput!): HideAssignmentGradesPayload
  hideAssignmentGradesForSections(input: HideAssignmentGradesForSectionsInput!): HideAssignmentGradesForSectionsPayload
  importOutcomes(input: ImportOutcomesInput!): ImportOutcomesPayload
  markSubmissionCommentsRead(input: MarkSubmissionCommentsReadInput!): MarkSubmissionCommentsReadPayload
  moveOutcomeLinks(input: MoveOutcomeLinksInput!): MoveOutcomeLinksPayload
  postAssignmentGrades(input: PostAssignmentGradesInput!): PostAssignmentGradesPayload
  postAssignmentGradesForSections(input: PostAssignmentGradesForSectionsInput!): PostAssignmentGradesForSectionsPayload

  "Sets the post policy for the assignment.\n"
  setAssignmentPostPolicy(input: SetAssignmentPostPolicyInput!): SetAssignmentPostPolicyPayload

  "Sets the post policy for the course, with an option to override and delete\nexisting assignment post policies.\n"
  setCoursePostPolicy(input: SetCoursePostPolicyInput!): SetCoursePostPolicyPayload
  setFriendlyDescription(input: SetFriendlyDescriptionInput!): SetFriendlyDescriptionPayload
  setModuleItemCompletion(input: SetModuleItemCompletionInput!): SetModuleItemCompletionPayload

  "Sets the overridden final score for the associated enrollment, optionally limited to a specific\ngrading period. This will supersede the computed final score/grade if present.\n"
  setOverrideScore(input: SetOverrideScoreInput!): SetOverrideScorePayload
  subscribeToDiscussionTopic(input: SubscribeToDiscussionTopicInput!): SubscribeToDiscussionTopicPayload
  updateAccountDomainLookup(input: UpdateAccountDomainLookupInput!): UpdateAccountDomainLookupPayload
  updateAssignment(input: UpdateAssignmentInput!): UpdateAssignmentPayload
  updateCommentBankItem(input: UpdateCommentBankItemInput!): UpdateCommentBankItemPayload
  updateConversationParticipants(input: UpdateConversationParticipantsInput!): UpdateConversationParticipantsPayload
  updateDiscussionEntriesReadState(input: UpdateDiscussionEntriesReadStateInput!): UpdateDiscussionEntriesReadStatePayload
  updateDiscussionEntry(input: UpdateDiscussionEntryInput!): UpdateDiscussionEntryPayload
  updateDiscussionEntryParticipant(input: UpdateDiscussionEntryParticipantInput!): UpdateDiscussionEntryParticipantPayload
  updateDiscussionReadState(input: UpdateDiscussionReadStateInput!): UpdateDiscussionReadStatePayload
  updateDiscussionThreadReadState(input: UpdateDiscussionThreadReadStateInput!): UpdateDiscussionThreadReadStatePayload
  updateDiscussionTopic(input: UpdateDiscussionTopicInput!): UpdateDiscussionTopicPayload
  updateInternalSetting(input: UpdateInternalSettingInput!): UpdateInternalSettingPayload
  updateIsolatedViewDeeplyNestedAlert(input: UpdateIsolatedViewDeeplyNestedAlertInput!): UpdateIsolatedViewDeeplyNestedAlertPayload
  updateLearningOutcome(input: UpdateLearningOutcomeInput!): UpdateLearningOutcomePayload
  updateLearningOutcomeGroup(input: UpdateLearningOutcomeGroupInput!): UpdateLearningOutcomeGroupPayload
  updateNotificationPreferences(input: UpdateNotificationPreferencesInput!): UpdateNotificationPreferencesPayload
  updateOutcomeCalculationMethod(input: UpdateOutcomeCalculationMethodInput!): UpdateOutcomeCalculationMethodPayload
  updateOutcomeProficiency(input: UpdateOutcomeProficiencyInput!): UpdateOutcomeProficiencyPayload
  updateSubmissionGrade(input: UpdateSubmissionsGradeInput!): UpdateSubmissionsGradePayload
  updateSubmissionsReadState(input: UpdateSubmissionsReadStateInput!): UpdateSubmissionsReadStatePayload
  updateUserDiscussionsSplitscreenView(input: UpdateUserDiscussionsSplitscreenViewInput!): UpdateUserDiscussionsSplitscreenViewPayload
}

type MutationLog {
  assetString: ID!
  mutationId: ID!
  mutationName: String!
  params: JSON

  "If the mutation was performed by a user masquerading as another user,\nthis field returns the \"real\" (logged-in) user.\n"
  realUser: User
  timestamp: DateTime
  user: User
}

"""The connection type for MutationLog."""
type MutationLogConnection {
  """A list of edges."""
  edges: [MutationLogEdge]

  """A list of nodes."""
  nodes: [MutationLog]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type MutationLogEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: MutationLog
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

enum NodeType {
  Account
  Assignment
  AssignmentGroup
  Conversation
  Course
  Discussion
  DiscussionEntry
  Enrollment
  File
  GradingPeriod
  Group
  GroupSet
  InternalSetting
  LearningOutcomeGroup
  MediaObject
  Module
  ModuleItem
  OutcomeCalculationMethod
  OutcomeProficiency
  Page
  PostPolicy
  Progress
  Rubric
  Section
  Submission
  Term
  User
}

"""A descriptive tag that doesn't link the assignment to a set"""
type Noop {
  _id: ID!
}

type Notification implements Node & Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  category: String!
  categoryDescription: String!
  categoryDisplayName: String!
  createdAt: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime
  workflowState: String
}

"""The categories that a notification can belong to"""
enum NotificationCategoryType {
  Account_Notification
  Added_To_Conversation
  All_Submissions
  Announcement
  Announcement_Created_By_You
  Appointment_Availability
  Appointment_Cancelations
  Appointment_Signups
  Blueprint
  Calendar
  Content_Link_Error
  Conversation_Created
  Conversation_Message
  Course_Content
  Discussion
  DiscussionEntry
  DiscussionMention
  ReportedReply
  Due_Date
  Files
  Grading
  Grading_Policies
  Invitation
  Late_Grading
  Membership_Update
  Other
  Recording_Ready
  Student_Appointment_Signups
  Submission_Comment
}

"""Frequency that notifications can be delivered on"""
enum NotificationFrequencyType {
  immediately
  daily
  weekly
  never
}

type NotificationPolicy implements Node & Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  communicationChannelId: ID!
  createdAt: DateTime
  frequency: String
  id: ID!
  notification: Notification
  updatedAt: DateTime
}

type NotificationPreferences {
  channels(channelId: ID = null): [CommunicationChannel!]
  readPrivacyNoticeDate: String
  sendObservedNamesInNotifications: Boolean
  sendScoresInEmails(courseId: ID): Boolean
}

"""Context types that can be associated with notification preferences"""
enum NotificationPreferencesContextType {
  Course
  Account
}

"""Types that can be submitted online"""
enum OnlineSubmissionType {
  basic_lti_launch
  student_annotation
  media_recording
  online_text_entry
  online_upload
  online_url
}

enum OrderDirection {
  ascending
  descending
}

type OutcomeAlignment implements Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  assignmentContentType: String
  contentId: ID!
  contentType: String!
  contextId: ID!
  contextType: String!
  createdAt: DateTime
  id: ID!
  learningOutcomeId: ID!
  moduleId: String
  moduleName: String
  moduleUrl: String
  moduleWorkflowState: String
  title: String!
  updatedAt: DateTime
  url: String!
}

"""Customized calculation method"""
type OutcomeCalculationMethod implements Node & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  calculationInt: Int
  calculationMethod: String!
  contextId: ID!
  contextType: String!
  id: ID!
  locked: Boolean!
}

type OutcomeFriendlyDescriptionType implements Node & Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  contextId: ID!
  contextType: String!
  createdAt: DateTime
  description: String!
  id: ID!
  learningOutcomeId: ID!
  updatedAt: DateTime
  workflowState: String!
}

"""Customized proficiency ratings"""
type OutcomeProficiency implements Node & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  contextId: ID!
  contextType: String!
  id: ID!
  locked: Boolean!
  proficiencyRatingsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ProficiencyRatingConnection
}

input OutcomeProficiencyRatingCreate {
  color: String!
  description: String!
  mastery: Boolean!
  points: Float!
}

type Page implements Node & Timestamped & ModuleItemInterface & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  createdAt: DateTime
  id: ID!
  modules: [Module!]
  title: String
  updatedAt: DateTime
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type PageViewAnalysis {
  """
  This number (0-3) is intended to give an idea of how the student is doing relative to others in the course
  """
  level: Int

  """The maximum number of views/participations in this course"""
  max: Int

  """The number of views/participations this student has"""
  total: Int
}

"""Settings for Peer Reviews on an Assignment"""
type PeerReviews {
  """Boolean representing whether or not peer reviews are anonymous"""
  anonymousReviews: Boolean

  """
  Boolean indicating peer reviews are assigned automatically. If false, the teacher is expected to manually assign peer reviews.
  """
  automaticReviews: Boolean

  """Integer representing the amount of reviews each user is assigned."""
  count: Int

  """Date and Time representing when the peer reviews are due"""
  dueAt: DateTime

  """Boolean indicating if peer reviews are required for this assignment"""
  enabled: Boolean

  """
  Boolean representing whether or not members from within the same group on a group assignment can be assigned to peer review their own group's work
  """
  intraReviews: Boolean
}

"""Autogenerated input type of PostAssignmentGradesForSections"""
input PostAssignmentGradesForSectionsInput {
  assignmentId: ID!
  sectionIds: [ID!]!
  gradedOnly: Boolean
}

"""Autogenerated return type of PostAssignmentGradesForSections"""
type PostAssignmentGradesForSectionsPayload {
  assignment: Assignment
  errors: [ValidationError!]
  progress: Progress
  sections: [Section!]
}

"""Autogenerated input type of PostAssignmentGrades"""
input PostAssignmentGradesInput {
  assignmentId: ID!
  sectionIds: [ID!]
  onlyStudentIds: [ID!]
  skipStudentIds: [ID!]
  gradedOnly: Boolean
}

"""Autogenerated return type of PostAssignmentGrades"""
type PostAssignmentGradesPayload {
  assignment: Assignment
  errors: [ValidationError!]
  progress: Progress
  sections: [Section!]
}

"A PostPolicy sets the policy for whether a Submission's grades are posted\nautomatically or manually. A PostPolicy can be set at the Course and/or\nAssignment level.\n"
type PostPolicy implements Node & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  assignment: Assignment
  course: Course!

  """ID of the object."""
  id: ID!
  postManually: Boolean!
}

"""The connection type for PostPolicy."""
type PostPolicyConnection {
  """A list of edges."""
  edges: [PostPolicyEdge]

  """A list of nodes."""
  nodes: [PostPolicy]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type PostPolicyEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PostPolicy
}

"""Customized proficiency rating"""
type ProficiencyRating implements LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  color: String
  description: String
  mastery: Boolean!
  points: Float
}

"""The connection type for ProficiencyRating."""
type ProficiencyRatingConnection {
  """A list of edges."""
  edges: [ProficiencyRatingEdge]

  """A list of nodes."""
  nodes: [ProficiencyRating]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ProficiencyRatingEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ProficiencyRating
}

input ProficiencyRatingInput {
  description: String!
  points: Float!
}

"""
Returns completion status and progress information about an asynchronous job
"""
type Progress implements Node & Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!

  """percent completed"""
  completion: Int
  context: ProgressContext
  createdAt: DateTime
  id: ID!

  """details about the job"""
  message: String
  state: ProgressState!

  """the type of operation"""
  tag: String!
  updatedAt: DateTime
}

union ProgressContext = Assignment | Course | File | GroupSet | User

enum ProgressState {
  queued
  running
  completed
  failed
}

type Query {
  account(
    """a graphql or legacy id"""
    id: ID

    """a id from the original SIS system"""
    sisId: String
  ): Account

  """All courses viewable by the current user"""
  allCourses: [Course!]
  assignment(
    """a graphql or legacy id"""
    id: ID

    """an id from the original SIS system"""
    sisId: String
  ): Assignment
  assignmentGroup(
    """a graphql or legacy id"""
    id: ID

    """an id from the original SIS system"""
    sisId: String
  ): AssignmentGroup
  auditLogs: AuditLogs
  course(
    """a graphql or legacy id, preference for search is given to this id"""
    id: ID

    """a id from the original SIS system"""
    sisId: String
  ): Course

  """Retrieves a single internal setting by its ID or name"""
  internalSetting(
    """a graphql or legacy id"""
    id: ID

    """the name of the Setting"""
    name: String
  ): InternalSetting

  """All internal settings"""
  internalSettings: [InternalSetting!]

  """LearningOutcome"""
  learningOutcome(
    """a graphql or legacy id"""
    id: ID!
  ): LearningOutcome

  """LearningOutcomeGroup"""
  learningOutcomeGroup(
    """a graphql or legacy id"""
    id: ID!
  ): LearningOutcomeGroup

  """Fetches an object given its type and legacy ID"""
  legacyNode(_id: ID!, type: NodeType!): Node

  """ModuleItem"""
  moduleItem(
    """a graphql or legacy id"""
    id: ID!
  ): ModuleItem

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """OutcomeCalculationMethod"""
  outcomeCalculationMethod(
    """a graphql or legacy id"""
    id: ID!
  ): OutcomeCalculationMethod

  """OutcomeProficiency"""
  outcomeProficiency(
    """a graphql or legacy id"""
    id: ID!
  ): OutcomeProficiency
  submission(
    """a graphql or legacy id"""
    id: ID!
  ): Submission
  term(
    """a graphql or legacy id"""
    id: ID

    """an id from the original SIS system"""
    sisId: String
  ): Term
}

type Quiz implements Node & Timestamped & ModuleItemInterface & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  createdAt: DateTime
  id: ID!
  modules: [Module!]
  updatedAt: DateTime
}

enum RatingInputType {
  not_liked
  liked
}

type Recipients {
  contextsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): MessageableContextConnection
  sendMessagesAll: Boolean
  usersConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): MessageableUserConnection
}

enum ReportType {
  inappropriate
  offensive
  other
}

type Rubric implements Node & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!

  "The different criteria that makes up this rubric\n"
  criteria: [RubricCriterion!]!
  freeFormCriterionComments: Boolean!
  hideScoreTotal: Boolean!
  id: ID!
  pointsPossible: Float
  title: String
}

"""An assessment for a rubric"""
type RubricAssessment implements LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  artifactAttempt: Int!

  "The assessments for the individual criteria in this rubric\n"
  assessmentRatings: [RubricAssessmentRating!]!
  assessmentType: AssessmentType!
  assessor: User
  rubricAssociation: RubricAssociation
  score: Float
  user: User
}

"""The connection type for RubricAssessment."""
type RubricAssessmentConnection {
  """A list of edges."""
  edges: [RubricAssessmentEdge]

  """A list of nodes."""
  nodes: [RubricAssessment]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type RubricAssessmentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: RubricAssessment
}

"""An assessment for a specific criteria in a rubric"""
type RubricAssessmentRating {
  """legacy canvas id"""
  _id: ID
  artifactAttempt: Int!
  comments: String
  commentsHtml: String

  "The rubric criteria that this assessment is for\n"
  criterion: RubricCriterion
  description: String
  outcome: LearningOutcome
  points: Float
}

"""How a rubric is being used in a context"""
type RubricAssociation implements LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  hidePoints: Boolean!
  hideScoreTotal: Boolean!
  useForGrading: Boolean!
}

"""Individual criteria for a rubric"""
type RubricCriterion implements LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  criterionUseRange: Boolean!
  description: String
  ignoreForScoring: Boolean!
  longDescription: String
  masteryPoints: Float
  outcome: LearningOutcome
  points: Float

  "The possible ratings available for this criterion\n"
  ratings: [RubricRating!]
}

"""Possible rating for a rubric criterion"""
type RubricRating implements LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  description: String!
  longDescription: String
  points: Float!
}

type Section implements Node & Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  createdAt: DateTime
  id: ID!
  name: String!
  sisId: String
  updatedAt: DateTime
  userCount: Int!
}

"""The connection type for Section."""
type SectionConnection {
  """A list of edges."""
  edges: [SectionEdge]

  """A list of nodes."""
  nodes: [Section]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type SectionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Section
}

"Determines if/how a student may join a group. A student can belong to\nonly one group per group set at a time.\n"
enum SelfSignupPolicy {
  """students may join any group"""
  enabled

  """students may join a group in their section"""
  restricted

  """self signup is not allowed"""
  disabled
}

"""Autogenerated input type of SetAssignmentPostPolicy"""
input SetAssignmentPostPolicyInput {
  assignmentId: ID!
  postManually: Boolean!
}

"""Autogenerated return type of SetAssignmentPostPolicy"""
type SetAssignmentPostPolicyPayload {
  errors: [ValidationError!]
  postPolicy: PostPolicy
}

"""Autogenerated input type of SetCoursePostPolicy"""
input SetCoursePostPolicyInput {
  courseId: ID!
  postManually: Boolean!
}

"""Autogenerated return type of SetCoursePostPolicy"""
type SetCoursePostPolicyPayload {
  errors: [ValidationError!]
  postPolicy: PostPolicy
}

"""Autogenerated input type of SetFriendlyDescription"""
input SetFriendlyDescriptionInput {
  description: String!
  outcomeId: ID!
  contextId: ID!
  contextType: String!
}

"""Autogenerated return type of SetFriendlyDescription"""
type SetFriendlyDescriptionPayload {
  errors: [ValidationError!]
  outcomeFriendlyDescription: OutcomeFriendlyDescriptionType
}

"""Autogenerated input type of SetModuleItemCompletion"""
input SetModuleItemCompletionInput {
  moduleId: ID!
  itemId: ID!
  done: Boolean!
}

"""Autogenerated return type of SetModuleItemCompletion"""
type SetModuleItemCompletionPayload {
  errors: [ValidationError!]
  moduleItem: ModuleItem!
}

"""Autogenerated input type of SetOverrideScore"""
input SetOverrideScoreInput {
  enrollmentId: ID!
  gradingPeriodId: ID
  overrideScore: Float
}

"""Autogenerated return type of SetOverrideScore"""
type SetOverrideScorePayload {
  errors: [ValidationError!]
  grades: Grades
}

"""basic information about a students activity in a course"""
type StudentSummaryAnalytics {
  pageViews: PageViewAnalysis
  participations: PageViewAnalysis
  tardinessBreakdown: TardinessBreakdown
}

type SubHeader implements ModuleItemInterface {
  modules: [Module!]
  title: String
}

type Submission implements Node & Timestamped & SubmissionInterface & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  assignedAssessments: [AssessmentRequest!]
  assignment: Assignment
  attachment: File
  attachments: [File!]
  attempt: Int!
  body: String
  commentsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: SubmissionCommentFilterInput = {allComments: false, forAttempt: null}
    sortOrder: SubmissionCommentsSortOrderType = null
  ): SubmissionCommentConnection
  createdAt: DateTime

  """how many points are being deducted due to late policy"""
  deductedPoints: Float

  """the submission grade *before* late policy deductions were applied"""
  enteredGrade: String

  """the submission score *before* late policy deductions were applied"""
  enteredScore: Float

  """excused assignments are ignored when calculating grades"""
  excused: Boolean
  extraAttempts: Int
  feedbackForCurrentAttempt: Boolean!
  grade: String
  gradeHidden: Boolean!

  """was the grade given on the current submission (resubmission)"""
  gradeMatchesCurrentSubmission: Boolean
  gradedAt: DateTime
  gradingStatus: SubmissionGradingStatus
  id: ID!
  late: Boolean
  latePolicyStatus: LatePolicyStatusType
  mediaObject: MediaObject
  missing: Boolean
  originalityData: JSON
  posted: Boolean!
  postedAt: DateTime
  readState: String
  resourceLinkLookupUuid: String
  rubricAssessmentsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: SubmissionRubricAssessmentFilterInput = {forAttempt: null}
  ): RubricAssessmentConnection
  score: Float
  state: SubmissionState!
  submissionDraft: SubmissionDraft
  submissionHistoriesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: SubmissionHistoryFilterInput = {states: [deleted, graded, pending_review, submitted, ungraded, unsubmitted], includeCurrentSubmission: true}
  ): SubmissionHistoryConnection
  submissionStatus: String
  submissionType: SubmissionType
  submittedAt: DateTime
  turnitinData: [TurnitinData!]
  unreadCommentCount: Int!
  updatedAt: DateTime
  url: URL
  user: User
}

type SubmissionComment implements Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  assignment: Assignment
  attachments: [File!]
  attempt: Int!
  author: User
  comment: String
  course: Course
  createdAt: DateTime!
  id: ID!
  mediaObject: MediaObject
  read: Boolean!
  submissionId: ID!
  updatedAt: DateTime
}

"""The connection type for SubmissionComment."""
type SubmissionCommentConnection {
  """A list of edges."""
  edges: [SubmissionCommentEdge]

  """A list of nodes."""
  nodes: [SubmissionComment]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type SubmissionCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: SubmissionComment
}

input SubmissionCommentFilterInput {
  "If all of the comments, regardless of the submission attempt, should be returned.\nIf this is true, the for_attempt argument will be ignored.\n"
  allComments: Boolean = false

  "What submission attempt the comments should be returned for. If not specified,\nit will return the comments for the current submisssion or submission history.\n"
  forAttempt: Int = null
}

enum SubmissionCommentsSortOrderType {
  asc
  desc
}

"""The connection type for Submission."""
type SubmissionConnection {
  """A list of edges."""
  edges: [SubmissionEdge]

  """A list of nodes."""
  nodes: [Submission]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type SubmissionDraft implements LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  activeSubmissionType: DraftableSubmissionType
  attachments: [File!]
  body(rewriteUrls: Boolean): String
  externalTool: ExternalTool
  ltiLaunchUrl: URL
  mediaObject: MediaObject
  meetsAssignmentCriteria: Boolean!
  meetsBasicLtiLaunchCriteria: Boolean!
  meetsMediaRecordingCriteria: Boolean!
  meetsStudentAnnotationCriteria: Boolean!
  meetsTextEntryCriteria: Boolean!
  meetsUploadCriteria: Boolean!
  meetsUrlCriteria: Boolean!
  resourceLinkLookupUuid: String
  submissionAttempt: Int!
  url: URL
}

"""An edge in a connection."""
type SubmissionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Submission
}

input SubmissionFilterInput {
  states: [SubmissionState!] = [submitted, pending_review, graded]
  sectionIds: [ID!]
  submittedSince: DateTime
  gradedSince: DateTime
  updatedSince: DateTime
}

enum SubmissionGradingStatus {
  needs_grading
  excused
  needs_review
  graded
}

type SubmissionHistory implements Timestamped & SubmissionInterface {
  assignedAssessments: [AssessmentRequest!]
  assignment: Assignment
  attachment: File
  attachments: [File!]
  attempt: Int!
  body: String
  commentsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: SubmissionCommentFilterInput = {allComments: false, forAttempt: null}
    sortOrder: SubmissionCommentsSortOrderType = null
  ): SubmissionCommentConnection
  createdAt: DateTime

  """how many points are being deducted due to late policy"""
  deductedPoints: Float

  """the submission grade *before* late policy deductions were applied"""
  enteredGrade: String

  """the submission score *before* late policy deductions were applied"""
  enteredScore: Float

  """excused assignments are ignored when calculating grades"""
  excused: Boolean
  extraAttempts: Int
  feedbackForCurrentAttempt: Boolean!
  grade: String
  gradeHidden: Boolean!

  """was the grade given on the current submission (resubmission)"""
  gradeMatchesCurrentSubmission: Boolean
  gradedAt: DateTime
  gradingStatus: SubmissionGradingStatus
  late: Boolean
  latePolicyStatus: LatePolicyStatusType
  mediaObject: MediaObject
  missing: Boolean
  originalityData: JSON
  posted: Boolean!
  postedAt: DateTime
  resourceLinkLookupUuid: String

  "The canvas legacy id of the root submission this history belongs to\n"
  rootId: ID!
  rubricAssessmentsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: SubmissionRubricAssessmentFilterInput = {forAttempt: null}
  ): RubricAssessmentConnection
  score: Float
  state: SubmissionState!
  submissionDraft: SubmissionDraft
  submissionStatus: String
  submissionType: SubmissionType
  submittedAt: DateTime
  turnitinData: [TurnitinData!]
  unreadCommentCount: Int!
  updatedAt: DateTime
  url: URL
  user: User
}

"""The connection type for SubmissionHistory."""
type SubmissionHistoryConnection {
  """A list of edges."""
  edges: [SubmissionHistoryEdge]

  """A list of nodes."""
  nodes: [SubmissionHistory]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type SubmissionHistoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: SubmissionHistory
}

input SubmissionHistoryFilterInput {
  states: [SubmissionState!] = [deleted, graded, pending_review, submitted, ungraded, unsubmitted]

  "If the most current submission should be included in the submission\nhistory results. Defaults to true.\n"
  includeCurrentSubmission: Boolean = true
}

"""Types for submission or submission history"""
interface SubmissionInterface {
  assignedAssessments: [AssessmentRequest!]
  assignment: Assignment
  attachment: File
  attachments: [File!]
  attempt: Int!
  body: String
  commentsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: SubmissionCommentFilterInput = {allComments: false, forAttempt: null}
    sortOrder: SubmissionCommentsSortOrderType = null
  ): SubmissionCommentConnection

  """how many points are being deducted due to late policy"""
  deductedPoints: Float

  """the submission grade *before* late policy deductions were applied"""
  enteredGrade: String

  """the submission score *before* late policy deductions were applied"""
  enteredScore: Float

  """excused assignments are ignored when calculating grades"""
  excused: Boolean
  extraAttempts: Int
  feedbackForCurrentAttempt: Boolean!
  grade: String
  gradeHidden: Boolean!

  """was the grade given on the current submission (resubmission)"""
  gradeMatchesCurrentSubmission: Boolean
  gradedAt: DateTime
  gradingStatus: SubmissionGradingStatus
  late: Boolean
  latePolicyStatus: LatePolicyStatusType
  mediaObject: MediaObject
  missing: Boolean
  originalityData: JSON
  posted: Boolean!
  postedAt: DateTime
  resourceLinkLookupUuid: String
  rubricAssessmentsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: SubmissionRubricAssessmentFilterInput = {forAttempt: null}
  ): RubricAssessmentConnection
  score: Float
  state: SubmissionState!
  submissionDraft: SubmissionDraft
  submissionStatus: String
  submissionType: SubmissionType
  submittedAt: DateTime
  turnitinData: [TurnitinData!]
  unreadCommentCount: Int!
  url: URL
  user: User
}

input SubmissionOrderCriteria {
  field: SubmissionOrderField!
  direction: OrderDirection
}

enum SubmissionOrderField {
  _id
  gradedAt
}

input SubmissionRubricAssessmentFilterInput {
  "What submission attempt the rubric assessment should be returned for. If not\nspecified, it will return the rubric assessment for the current submisssion\nor submission history.\n"
  forAttempt: Int = null
}

input SubmissionSearchFilterInput {
  states: [SubmissionState!] = [submitted, pending_review, graded]
  sectionIds: [ID!]
  enrollmentTypes: [EnrollmentType!]

  "The partial name or full ID of the users to match and return in the\nresults list. Must be at least 3 characters.\nQueries by administrative users will search on SIS ID, login ID, name, or email\naddress; non-administrative queries will only be compared against name.\n"
  userSearch: String

  """Limit results to submissions that scored below the specified value"""
  scoredLessThan: Float

  """Limit results to submissions that scored above the specified value"""
  scoredMoreThan: Float

  """Limit results to submissions that are late"""
  late: Boolean

  """Limit results by grading status"""
  gradingStatus: SubmissionGradingStatus
}

"""Specify a sort for the results"""
input SubmissionSearchOrder {
  field: SubmissionSearchOrderField!
  direction: OrderDirection
}

"""The user or submission field to sort by"""
enum SubmissionSearchOrderField {
  username
  score
  submitted_at
}

enum SubmissionState {
  submitted
  unsubmitted
  pending_review
  graded
  ungraded
  deleted
}

"""Types of submissions an assignment accepts"""
enum SubmissionType {
  attendance
  basic_lti_launch
  discussion_topic
  external_tool
  media_recording
  none
  not_graded
  on_paper
  online_quiz
  online_text_entry
  online_upload
  online_url
  student_annotation
  wiki_page
}

"""Autogenerated input type of SubscribeToDiscussionTopic"""
input SubscribeToDiscussionTopicInput {
  discussionTopicId: ID!
  subscribed: Boolean!
}

"""Autogenerated return type of SubscribeToDiscussionTopic"""
type SubscribeToDiscussionTopicPayload {
  discussionTopic: Discussion!
  errors: [ValidationError!]
}

"""statistics based on timeliness of student submissions"""
type TardinessBreakdown {
  late: Float
  missing: Float
  onTime: Float
  total: Int
}

type Term implements Node & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!

  """courses for this term"""
  coursesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): CourseConnection
  endAt: DateTime
  id: ID!
  name: String
  sisId: String
  sisTermId: ID
  startAt: DateTime
}

"""Contains timestamp metadata"""
interface Timestamped {
  createdAt: DateTime
  updatedAt: DateTime
}

union TurnitinContext = File | Submission

type TurnitinData {
  reportUrl: String
  score: Float
  state: String
  status: String
  target: TurnitinContext!
}

scalar URL

"""Autogenerated input type of UpdateAccountDomainLookup"""
input UpdateAccountDomainLookupInput {
  accountDomainId: ID
  accountDomainLookupId: ID!
  authenticationProvider: String
  name: String
}

"""Autogenerated return type of UpdateAccountDomainLookup"""
type UpdateAccountDomainLookupPayload {
  accountDomainLookup: AccountDomainLookup
  errors: [ValidationError!]
}

"""Autogenerated input type of UpdateAssignment"""
input UpdateAssignmentInput {
  state: AssignmentState
  dueAt: DateTime
  lockAt: DateTime
  unlockAt: DateTime
  description: String
  assignmentOverrides: [AssignmentOverrideCreateOrUpdate!]
  position: Int
  pointsPossible: Float
  gradingType: GradingType
  allowedExtensions: [String!]
  assignmentGroupId: ID
  groupSetId: ID
  allowedAttempts: Int
  onlyVisibleToOverrides: Boolean
  submissionTypes: [SubmissionType!]
  peerReviews: AssignmentPeerReviewsUpdate
  moderatedGrading: AssignmentModeratedGradingUpdate
  gradeGroupStudentsIndividually: Boolean
  groupCategoryId: ID
  omitFromFinalGrade: Boolean
  anonymousInstructorAnnotations: Boolean
  postToSis: Boolean

  """requires anonymous_marking course feature to be set to true"""
  anonymousGrading: Boolean
  moduleIds: [ID!]
  id: ID!
  name: String
}

"""Autogenerated return type of UpdateAssignment"""
type UpdateAssignmentPayload {
  assignment: Assignment
  errors: [ValidationError!]
}

"""Autogenerated input type of UpdateCommentBankItem"""
input UpdateCommentBankItemInput {
  id: ID!
  comment: String!
}

"""Autogenerated return type of UpdateCommentBankItem"""
type UpdateCommentBankItemPayload {
  commentBankItem: CommentBankItem
  errors: [ValidationError!]
}

"""Autogenerated input type of UpdateConversationParticipants"""
input UpdateConversationParticipantsInput {
  conversationIds: [ID!]!
  starred: Boolean
  subscribed: Boolean
  workflowState: String
}

"""Autogenerated return type of UpdateConversationParticipants"""
type UpdateConversationParticipantsPayload {
  conversationParticipants: [ConversationParticipant!]
  errors: [ValidationError!]
}

"""Autogenerated input type of UpdateDiscussionEntriesReadState"""
input UpdateDiscussionEntriesReadStateInput {
  discussionEntryIds: [ID!]!
  read: Boolean!
}

"""Autogenerated return type of UpdateDiscussionEntriesReadState"""
type UpdateDiscussionEntriesReadStatePayload {
  discussionEntries: [DiscussionEntry!]
  errors: [ValidationError!]
}

"""Autogenerated input type of UpdateDiscussionEntry"""
input UpdateDiscussionEntryInput {
  discussionEntryId: ID!
  message: String
  removeAttachment: Boolean
  fileId: ID
  includeReplyPreview: Boolean
}

"""Autogenerated input type of UpdateDiscussionEntryParticipant"""
input UpdateDiscussionEntryParticipantInput {
  discussionEntryId: ID!
  read: Boolean
  rating: RatingInputType
  forcedReadState: Boolean
  reportType: ReportType
}

"""Autogenerated return type of UpdateDiscussionEntryParticipant"""
type UpdateDiscussionEntryParticipantPayload {
  discussionEntry: DiscussionEntry!
  errors: [ValidationError!]
}

"""Autogenerated return type of UpdateDiscussionEntry"""
type UpdateDiscussionEntryPayload {
  discussionEntry: DiscussionEntry
  errors: [ValidationError!]
}

"""Autogenerated input type of UpdateDiscussionReadState"""
input UpdateDiscussionReadStateInput {
  discussionTopicId: ID!
  read: Boolean!
}

"""Autogenerated return type of UpdateDiscussionReadState"""
type UpdateDiscussionReadStatePayload {
  discussionTopic: Discussion!
  errors: [ValidationError!]
}

"""Autogenerated input type of UpdateDiscussionThreadReadState"""
input UpdateDiscussionThreadReadStateInput {
  discussionEntryId: ID!
  read: Boolean!
}

"""Autogenerated return type of UpdateDiscussionThreadReadState"""
type UpdateDiscussionThreadReadStatePayload {
  discussionEntry: DiscussionEntry!
  errors: [ValidationError!]
}

"""Autogenerated input type of UpdateDiscussionTopic"""
input UpdateDiscussionTopicInput {
  discussionTopicId: ID!
  published: Boolean
  locked: Boolean
}

"""Autogenerated return type of UpdateDiscussionTopic"""
type UpdateDiscussionTopicPayload {
  discussionTopic: Discussion!
  errors: [ValidationError!]
}

"""Autogenerated input type of UpdateInternalSetting"""
input UpdateInternalSettingInput {
  internalSettingId: ID!
  value: String!
}

"""Autogenerated return type of UpdateInternalSetting"""
type UpdateInternalSettingPayload {
  errors: [ValidationError!]
  internalSetting: InternalSetting!
}

"""Autogenerated input type of UpdateIsolatedViewDeeplyNestedAlert"""
input UpdateIsolatedViewDeeplyNestedAlertInput {
  isolatedViewDeeplyNestedAlert: Boolean!
}

"""Autogenerated return type of UpdateIsolatedViewDeeplyNestedAlert"""
type UpdateIsolatedViewDeeplyNestedAlertPayload {
  errors: [ValidationError!]
  user: User!
}

"""Autogenerated input type of UpdateLearningOutcomeGroup"""
input UpdateLearningOutcomeGroupInput {
  id: ID!
  title: String
  description: String
  vendorGuid: String
  parentOutcomeGroupId: ID
}

"""Autogenerated return type of UpdateLearningOutcomeGroup"""
type UpdateLearningOutcomeGroupPayload {
  errors: [ValidationError!]
  learningOutcomeGroup: LearningOutcomeGroup
}

"""Autogenerated input type of UpdateLearningOutcome"""
input UpdateLearningOutcomeInput {
  title: String!
  description: String
  displayName: String
  vendorGuid: String
  calculationMethod: String
  calculationInt: Int
  masteryPoints: Float
  ratings: [ProficiencyRatingInput!]
  id: ID!
}

"""Autogenerated return type of UpdateLearningOutcome"""
type UpdateLearningOutcomePayload {
  errors: [ValidationError!]
  learningOutcome: LearningOutcome
}

"""Autogenerated input type of UpdateNotificationPreferences"""
input UpdateNotificationPreferencesInput {
  accountId: ID
  courseId: ID
  contextType: NotificationPreferencesContextType!
  enabled: Boolean
  hasReadPrivacyNotice: Boolean
  sendScoresInEmails: Boolean
  sendObservedNamesInNotifications: Boolean
  communicationChannelId: ID
  notificationCategory: NotificationCategoryType
  frequency: NotificationFrequencyType
  isPolicyOverride: Boolean
}

"""Autogenerated return type of UpdateNotificationPreferences"""
type UpdateNotificationPreferencesPayload {
  errors: [ValidationError!]
  user: User
}

"""Autogenerated input type of UpdateOutcomeCalculationMethod"""
input UpdateOutcomeCalculationMethodInput {
  id: ID!
  calculationMethod: String
  calculationInt: Int
}

"""Autogenerated return type of UpdateOutcomeCalculationMethod"""
type UpdateOutcomeCalculationMethodPayload {
  errors: [ValidationError!]
  outcomeCalculationMethod: OutcomeCalculationMethod
}

"""Autogenerated input type of UpdateOutcomeProficiency"""
input UpdateOutcomeProficiencyInput {
  id: ID!
  proficiencyRatings: [OutcomeProficiencyRatingCreate!]
}

"""Autogenerated return type of UpdateOutcomeProficiency"""
type UpdateOutcomeProficiencyPayload {
  errors: [ValidationError!]
  outcomeProficiency: OutcomeProficiency
}

"""Autogenerated input type of UpdateSubmissionsGrade"""
input UpdateSubmissionsGradeInput {
  submissionId: ID!
  score: Int!
}

"""Autogenerated return type of UpdateSubmissionsGrade"""
type UpdateSubmissionsGradePayload {
  errors: [ValidationError!]
  submission: Submission
}

"""Autogenerated input type of UpdateSubmissionsReadState"""
input UpdateSubmissionsReadStateInput {
  submissionIds: [ID!]!
  read: Boolean!
}

"""Autogenerated return type of UpdateSubmissionsReadState"""
type UpdateSubmissionsReadStatePayload {
  errors: [ValidationError!]
  submissions: [Submission!]
}

"""Autogenerated input type of UpdateUserDiscussionsSplitscreenView"""
input UpdateUserDiscussionsSplitscreenViewInput {
  discussionsSplitscreenView: Boolean!
}

"""Autogenerated return type of UpdateUserDiscussionsSplitscreenView"""
type UpdateUserDiscussionsSplitscreenViewPayload {
  errors: [ValidationError!]
  user: User!
}

type User implements Node & Timestamped & LegacyIDInterface {
  """legacy canvas id"""
  _id: ID!
  avatarUrl: URL
  commentBankItemsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    "Only include comments that match the query string.\n"
    query: String
    limit: Int
  ): CommentBankItemConnection
  conversationsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    scope: String
    filter: [String!]
  ): ConversationParticipantConnection
  courseRoles(
    courseId: String

    """Return only requested base role types"""
    roleTypes: [String!]

    """Only return default/built_in roles"""
    builtInOnly: Boolean
  ): [String!]
  createdAt: DateTime
  discussionsSplitscreenView: Boolean!
  email: String
  enrollments(
    """only return enrollments for this course"""
    courseId: ID

    """
    Whether or not to restrict results to `active` enrollments in `available` courses
    """
    currentOnly: Boolean

    """The fields to order the results by"""
    orderBy: [String!]

    """Whether or not to exclude `completed` enrollments"""
    excludeConcluded: Boolean
  ): [Enrollment!]!
  favoriteCoursesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): CourseConnection
  favoriteGroupsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GroupConnection

  "**NOTE**: this only returns groups for the currently logged-in user.\n"
  groups: [Group!]
  id: ID!
  integrationId: String
  loginId: String
  name: String
  notificationPreferences: NotificationPreferences
  notificationPreferencesEnabled(accountId: ID, courseId: ID, contextType: NotificationPreferencesContextType!): Boolean!
  pronouns: String
  recipients(search: String, context: String): Recipients
  recipientsObservers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    recipientIds: [String!]!
    contextCode: String!
  ): MessageableUserConnection

  """
  A short name the user has selected, for use in conversations or other less formal places through the site.
  """
  shortName: String
  sisId: String

  """
  The name of the user that is should be used for sorting groups of users, such as in the gradebook.
  """
  sortableName: String
  summaryAnalytics(
    """returns summary analytics for this course"""
    courseId: ID!
  ): StudentSummaryAnalytics
  totalRecipients(context: String): Int!
  updatedAt: DateTime

  """All submissions with comments that the current_user is able to view"""
  viewableSubmissionsConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filter: [String!]
  ): SubmissionConnection
}

"""The connection type for User."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]

  """A list of nodes."""
  nodes: [User]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User
}

type ValidationError {
  attribute: String
  message: String!
}
